#include "helper.h"
#include "linearizability.h"

%% if 'cds' in data_structure
#include <cds/container/treiber_stack.h>
#include <cds/container/basket_queue.h>
#include <cds/container/moir_queue.h>
#include <cds/container/msqueue.h>
#include <cds/container/optimistic_queue.h>
#include <cds/container/rwqueue.h>
#include <cds/container/vyukov_mpmc_cycle_queue.h>
#include <cds/container/lazy_list_hp.h>
#include <cds/container/skip_list_set_hp.h>

#include <cds/init.h>
#include <cds/gc/hp.h>

cds::gc::HP *hpHolder;
cds::gc::HP::thread_gc *gcHolder;

ThreadLocalStorage<cds::threading::ThreadData*> cdsTLS;

namespace cds {
  CDS_ATOMIC::atomic<size_t> threading::ThreadData::s_nLastUsedProcNo(0);
  size_t threading::ThreadData::s_nProcCount = 1;

  namespace details {
    bool init_first_call() {
      return true;
    }

    bool fini_last_call() {
      return true;
    }
  }
}
%% endif

%% if data_structure == "boost::lockfree::fifo<int>"
#include <boost/lockfree/fifo.hpp>
%% endif

%% if data_structure == "crange"
#include "../tests/test-crange.cc"
%% endif


Linearizability linearizability({{ num_threads }});
{{ data_structure }}* ds;

void Create() {
%% if data_structure == "crange"
  seed_tls.Reset();
  ds = new {{ data_structure }}(8);
%% else
  ds = new {{ data_structure }}();
%% endif
}

void Destroy() {
%% if data_structure == "boost::lockfree::fifo<int>"
  while (!ds->empty()) {
    int temp;
    ds->dequeue(&temp);
  }
%% endif
  delete ds;
}

struct Configure {
  Configure() {
    linearizability.RegisterImplementation(&Create, &Destroy);
    linearizability.RegisterModel(&Create, &Destroy);

%% for thread in threads
  %% set thread_id = loop.index0
  %% for action in thread
    linearizability.AddStep({{ thread_id }}, []() { {{ action }} }, "{{ action }}");
  %% endfor
%% endfor 
  }
};

static Configure config;

volatile int x;
void ThreadBody(int i) {
%% if 'cds' in data_structure
  cds::gc::HP::thread_gc gc;
%% endif
  linearizability.ThreadBody(i);
  int y = x;
}

void Setup() {
%% if 'cds' in data_structure
  cds::Initialize();
  hpHolder = new cds::gc::HP();
  gcHolder = new cds::gc::HP::thread_gc();
%% endif

  linearizability.Setup();

  for (int i = 0; i < {{ num_threads }}; i++) {
    StartThread(ThreadBody, i);
  }
}

void Finish() {
  linearizability.Finish();

%% if 'cds' in data_structure
  delete gcHolder;
  delete hpHolder;
  cds::Terminate();
%% endif
}
